{"project-id": 0, "headers": {"Host": "localhost:5000", "Accept-Encoding": "identity", "Sentry-Trace": "aad59744a6304d05b4f9bf8967454d94-8b81e3dad0a16950-", "Content-Length": "1897", "Content-Type": "application/json", "Content-Encoding": "gzip", "User-Agent": "sentry.python/1.1.0", "X-Sentry-Auth": "Sentry sentry_key=examplePublicKey, sentry_version=7, sentry_client=sentry.python/1.1.0"}, "data": {"threads": {"values": [{"stacktrace": {"frames": [{"filename": "capture_error_using_logger.py", "abs_path": "/home/panagiotis/development/projects/exercises/sentry_server/capture_error_using_logger.py", "function": "<module>", "module": "__main__", "lineno": 21, "pre_context": [")", "", "logger.debug(\"I am ignored\")", "logger.info(\"I am a breadcrumb\")", "logger.error(\"I am an event\", extra=dict(bar=43))"], "context_line": "logger.exception(\"An exception happened\")", "post_context": [], "vars": {"__name__": "'__main__'", "__doc__": "None", "__package__": "None", "__loader__": "<_frozen_importlib_external.SourceFileLoader object at 0x7fc240560df0>", "__spec__": "None", "__annotations__": {}, "__builtins__": "<module 'builtins' (built-in)>", "__file__": "'capture_error_using_logger.py'", "__cached__": "None", "logging": "<module 'logging' from '/usr/lib64/python3.8/logging/__init__.py'>"}, "in_app": true}, {"filename": "__init__.py", "abs_path": "/usr/lib64/python3.8/logging/__init__.py", "function": "exception", "module": "logging", "lineno": 1469, "pre_context": ["", "    def exception(self, msg, *args, exc_info=True, **kwargs):", "        \"\"\"", "        Convenience method for logging an ERROR with exception information.", "        \"\"\""], "context_line": "        self.error(msg, *args, exc_info=exc_info, **kwargs)", "post_context": ["", "    def critical(self, msg, *args, **kwargs):", "        \"\"\"", "        Log 'msg % args' with severity 'CRITICAL'.", ""], "vars": {"self": "<Logger mylogger (WARNING)>", "msg": "'An exception happened'", "exc_info": "True", "args": [], "kwargs": {}}, "in_app": true}, {"filename": "__init__.py", "abs_path": "/usr/lib64/python3.8/logging/__init__.py", "function": "error", "module": "logging", "lineno": 1463, "pre_context": ["        a true value, e.g.", "", "        logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1)", "        \"\"\"", "        if self.isEnabledFor(ERROR):"], "context_line": "            self._log(ERROR, msg, args, **kwargs)", "post_context": ["", "    def exception(self, msg, *args, exc_info=True, **kwargs):", "        \"\"\"", "        Convenience method for logging an ERROR with exception information.", "        \"\"\""], "vars": {"self": "<Logger mylogger (WARNING)>", "msg": "'An exception happened'", "args": [], "kwargs": {"exc_info": "True"}}, "in_app": true}, {"filename": "__init__.py", "abs_path": "/usr/lib64/python3.8/logging/__init__.py", "function": "_log", "module": "logging", "lineno": 1577, "pre_context": ["                exc_info = (type(exc_info), exc_info, exc_info.__traceback__)", "            elif not isinstance(exc_info, tuple):", "                exc_info = sys.exc_info()", "        record = self.makeRecord(self.name, level, fn, lno, msg, args,", "                                 exc_info, func, extra, sinfo)"], "context_line": "        self.handle(record)", "post_context": ["", "    def handle(self, record):", "        \"\"\"", "        Call the handlers for the specified record.", ""], "vars": {"self": "<Logger mylogger (WARNING)>", "level": "40", "msg": "'An exception happened'", "args": [], "exc_info": ["None", "None", "None"], "extra": "None", "stack_info": "False", "stacklevel": "1", "sinfo": "None", "fn": "'capture_error_using_logger.py'"}, "in_app": true}, {"filename": "__init__.py", "abs_path": "/usr/lib64/python3.8/logging/__init__.py", "function": "handle", "module": "logging", "lineno": 1587, "pre_context": ["", "        This method is used for unpickled records received from a socket, as", "        well as those created locally. Logger-level filtering is applied.", "        \"\"\"", "        if (not self.disabled) and self.filter(record):"], "context_line": "            self.callHandlers(record)", "post_context": ["", "    def addHandler(self, hdlr):", "        \"\"\"", "        Add the specified handler to this logger.", "        \"\"\""], "vars": {"self": "<Logger mylogger (WARNING)>", "record": "<LogRecord: mylogger, 40, capture_error_using_logger.py, 21, \"An exception happened\">"}, "in_app": true}, {"filename": "__init__.py", "abs_path": "/usr/lib64/python3.8/logging/__init__.py", "function": "handle", "module": "logging", "lineno": 950, "pre_context": ["        \"\"\"", "        rv = self.filter(record)", "        if rv:", "            self.acquire()", "            try:"], "context_line": "                self.emit(record)", "post_context": ["            finally:", "                self.release()", "        return rv", "", "    def setFormatter(self, fmt):"], "vars": {"self": "<EventHandler (ERROR)>", "record": "<LogRecord: mylogger, 40, capture_error_using_logger.py, 21, \"An exception happened\">", "rv": "True"}, "in_app": true}]}, "crashed": false, "current": true}]}, "level": "error", "logger": "mylogger", "logentry": {"message": "An exception happened", "params": []}, "extra": {"sys.argv": ["capture_error_using_logger.py"]}, "event_id": "e8a02ed4398f4aa2b7f2e25a7380b15a", "timestamp": "2021-08-22T18:07:02.498008Z", "breadcrumbs": {"values": [{"type": "log", "level": "error", "category": "mylogger", "message": "I am an event", "timestamp": "2021-08-22T18:07:02.461695Z", "data": {"bar": 43}}]}, "contexts": {"runtime": {"name": "CPython", "version": "3.8.6", "build": "3.8.6 (default, Sep 25 2020, 00:00:00) \n[GCC 10.2.1 20200723 (Red Hat 10.2.1-1)]"}}, "modules": {"wheel": "0.36.2", "werkzeug": "2.0.1", "urllib3": "1.26.5", "setuptools": "57.0.0", "sentry-sdk": "1.1.0", "pip": "21.1.2", "markupsafe": "2.0.1", "jinja2": "3.0.1", "itsdangerous": "2.0.1", "flask": "2.0.1", "click": "8.0.1", "certifi": "2021.5.30"}, "environment": "production", "server_name": "dhcppc5", "sdk": {"name": "sentry.python", "version": "1.1.0", "packages": [{"name": "pypi:sentry-sdk", "version": "1.1.0"}], "integrations": ["argv", "atexit", "dedupe", "excepthook", "logging", "modules", "stdlib", "threading"]}, "platform": "python", "_meta": {"threads": {"values": {"0": {"stacktrace": {"frames": {"0": {"vars": {"": {"len": 14}}}, "3": {"vars": {"": {"len": 13}}}}}}}}}}}
